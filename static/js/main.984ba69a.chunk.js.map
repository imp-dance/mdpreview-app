{"version":3,"sources":["components/core/App/styles.ts","components/common/CodeEditor/CodeEditor.tsx","components/common/Preview/Preview.tsx","components/core/SettingsModal/SettingsModal.tsx","components/core/App/App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","props","fontSize","StyledApp","styled","div","SettingsButton","button","CodeEditor","onChange","value","StyledCodeEditor","highlight","code","Prism","languages","markdown","onValueChange","Editor","Preview","PreviewContainer","allowDangerousHtml","ReactMarkdown","SettingsModal","open","focusRef","useRef","useContext","SettingsContext","setSettings","markdownStyle","useEffect","current","focus","document","body","StyledSettingsModal","ref","type","name","onClick","checked","e","parseInt","target","createContext","App","useState","setMarkdown","settingsOpen","setSettingsOpen","settings","Provider","newSettings","split","minSize","aria-label","aria-pressed","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.984ba69a.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle<{\n  fontSize?: Number;\n}>`\n    @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,700;1,400&display=swap');\n    body, html {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n        font-size:${(props) => `${props.fontSize}px` ?? \"16px\"};\n        padding:0;\n        margin:0;\n    }\n`;\n\nexport const StyledApp = styled.div`\n  background: #001514;\n  --padding: 2rem;\n\n  .Resizer {\n    background: #000;\n    opacity: 0.2;\n    z-index: 1;\n    box-sizing: border-box;\n    background-clip: padding-box;\n  }\n\n  .Resizer:hover {\n    transition: all 2s ease;\n  }\n\n  .Resizer.horizontal {\n    height: 11px;\n    margin: -5px 0;\n    border-top: 5px solid rgba(255, 255, 255, 0);\n    border-bottom: 5px solid rgba(255, 255, 255, 0);\n    cursor: row-resize;\n  }\n\n  .Resizer.horizontal:hover,\n  .Resizer.horizontal.resizing {\n    border-top: 5px solid rgba(0, 0, 0, 0.5);\n    border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .Resizer.vertical {\n    width: 11px;\n    margin: 0 -5px;\n    border-left: 5px solid rgba(255, 255, 255, 0);\n    border-right: 5px solid rgba(255, 255, 255, 0);\n    cursor: col-resize;\n  }\n\n  .Resizer.vertical:hover,\n  .Resizer.vertical.resizing {\n    border-left: 5px solid rgba(0, 0, 0, 0.5);\n    border-right: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .DragLayer {\n    z-index: 1;\n    pointer-events: none;\n  }\n\n  .DragLayer.resizing {\n    pointer-events: auto;\n  }\n\n  .DragLayer.horizontal {\n    cursor: row-resize;\n  }\n\n  .DragLayer.vertical {\n    cursor: col-resize;\n  }\n`;\n\nexport const SettingsButton = styled.button`\n  appearance: none;\n  border: none;\n  border-radius: 50%;\n  font-size: 16px;\n  width: 2.2em;\n  height: 2.2em;\n  position: fixed;\n  bottom: 1em;\n  right: 1em;\n  cursor: pointer;\n  background: url(\"/settings.png\") no-repeat center center;\n  background-size: 1.1em;\n  background-color: rgba(0, 0, 0, 0.1);\n  opacity: 0.7;\n  &:hover {\n    opacity: 1;\n  }\n`;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Editor from \"react-simple-code-editor\";\nimport Prism from \"prismjs\";\nimport \"prismjs/components/prism-markdown\";\nimport \"prismjs/themes/prism-okaidia.css\";\n\ntype Props = {\n  onChange: (e: string) => void;\n  value: string;\n};\n\nexport const CodeEditor = ({ onChange, value }: Props) => {\n  return (\n    <>\n      <StyledCodeEditor\n        highlight={(code) =>\n          Prism.highlight(code, Prism.languages.markdown, \"markdown\")\n        }\n        onValueChange={(code) => onChange(code)}\n        value={value}\n      />\n    </>\n  );\n};\n\nconst StyledCodeEditor = styled(Editor)`\n  color: #f9f9f9;\n  min-height: 100vh;\n  background: #001514;\n  width: 100%;\n  padding: var(--padding) !important;\n  font-family: \"IBM Plex Mono\", monospace;\n  .token.regex,\n  .token.important {\n    color: #ffbd00 !important;\n  }\n  .token.url {\n    color: #a6b1e1;\n  }\n  textarea {\n    font-family: \"IBM Plex Mono\", monospace;\n    min-height: 100vh;\n    padding: var(--padding) !important;\n  }\n`;\n\nexport default CodeEditor;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ReactMarkdown from \"react-markdown\";\n\ntype Props = {\n  markdown: string;\n};\n\nexport const Preview = ({ markdown }: Props) => {\n  return (\n    <PreviewContainer allowDangerousHtml={true}>{markdown}</PreviewContainer>\n  );\n};\n\nconst PreviewContainer = styled(ReactMarkdown)`\n  background: #f1f0f8;\n  width: 100%;\n  padding: var(--padding);\n  overflow-y: auto;\n  > *:first-child {\n    margin-top: 0 !important;\n  }\n`;\n\nexport default Preview;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { Settings } from \"../../../types\";\nimport { SettingsContext } from \"../App/App\";\n\ntype Props = {\n  open: boolean;\n  onChange: (newSettings: Partial<Settings>) => void;\n};\n\nexport const SettingsModal = ({ open, onChange }: Props) => {\n  const focusRef = useRef<HTMLDivElement>(null);\n  const { setSettings, markdownStyle, fontSize } = useContext(SettingsContext);\n  useEffect(() => {\n    if (focusRef.current && open) {\n      focusRef.current.focus();\n    }\n    if (!open) {\n      document.body.focus();\n    }\n  }, [open, focusRef]);\n  return (\n    <StyledSettingsModal open={open} ref={focusRef}>\n      <h4>Markdown style</h4>\n      <label>\n        <input\n          type=\"radio\"\n          name=\"markdown_style\"\n          onClick={() => setSettings({ markdownStyle: \"traditional\" })}\n          value={\"traditional\"}\n          checked={markdownStyle === \"traditional\"}\n        />{\" \"}\n        Traditional\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          name=\"markdown_style\"\n          onClick={() => setSettings({ markdownStyle: \"github\" })}\n          value={\"github\"}\n          checked={markdownStyle === \"github\"}\n        />{\" \"}\n        Github flavored\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          name=\"markdown_style\"\n          onClick={() => setSettings({ markdownStyle: \"jira\" })}\n          value={\"jira\"}\n          checked={markdownStyle === \"jira\"}\n        />{\" \"}\n        Jira flavored\n      </label>\n      <h4>Font-size</h4>\n      <label>\n        <input\n          type=\"number\"\n          value={fontSize}\n          onChange={(e) =>\n            setSettings({ fontSize: parseInt(e.target.value, 10) })\n          }\n        />\n      </label>\n    </StyledSettingsModal>\n  );\n};\n\nconst StyledSettingsModal = styled.div<Partial<Props>>`\n  font-size: 16px;\n  h4 {\n    margin: 1em 0 0.6em;\n    &:first-child {\n      margin-top: 0;\n    }\n  }\n  position: fixed;\n  bottom: 4em;\n  right: 3.5em;\n  background: #c4c1d8;\n  border-radius: 5px;\n  border-bottom-right-radius: 0px;\n  padding: 1em;\n  transition: all 0.15s cubic-bezier(0.65, 0.05, 0.36, 1);\n  display: flex;\n  flex-direction: column;\n  ${(props) =>\n    !props.open &&\n    `\n    opacity:0;\n    transform:translate(0.6rem, 0.6rem);\n  `}\n`;\n\nexport default SettingsModal;\n","import React, { createContext, useState } from \"react\";\nimport { SplitPane } from \"react-multi-split-pane\";\nimport { GlobalStyle, SettingsButton, StyledApp } from \"./styles\";\nimport { CodeEditor } from \"../../common/CodeEditor/CodeEditor\";\nimport { Preview } from \"../../common/Preview/Preview\";\nimport { SettingsModal } from \"../SettingsModal/SettingsModal\";\nimport { Settings, SettingsOnChange } from \"../../../types\";\n\nexport const SettingsContext = createContext<Settings & SettingsOnChange>({\n  fontSize: 16,\n  markdownStyle: \"traditional\",\n  setSettings: () => {},\n});\n\nfunction App() {\n  const [markdown, setMarkdown] = useState(\"# mdpreview.app\\n---\");\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [settings, setSettings] = useState<Settings>({\n    fontSize: 16,\n    markdownStyle: \"traditional\",\n  });\n  return (\n    <SettingsContext.Provider\n      value={{\n        ...settings,\n        setSettings: (newSettings) =>\n          setSettings({ ...settings, ...newSettings }),\n      }}\n    >\n      <GlobalStyle fontSize={settings.fontSize} />\n      <StyledApp>\n        <SplitPane split=\"vertical\" minSize={50}>\n          <CodeEditor onChange={(code) => setMarkdown(code)} value={markdown} />\n          <Preview markdown={markdown} />\n        </SplitPane>\n        <SettingsButton\n          aria-label=\"Open settings\"\n          aria-pressed={settingsOpen}\n          onClick={() => setSettingsOpen(!settingsOpen)}\n        />\n        <SettingsModal\n          open={settingsOpen}\n          onChange={(newSettings: Partial<Settings>) =>\n            setSettings({ ...settings, ...newSettings })\n          }\n        />\n      </StyledApp>\n    </SettingsContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/core/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}